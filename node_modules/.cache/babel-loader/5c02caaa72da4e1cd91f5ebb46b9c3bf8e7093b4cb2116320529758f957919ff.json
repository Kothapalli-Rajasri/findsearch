{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kotha\\\\OneDrive\\\\Desktop\\\\fullstack\\\\findsearch\\\\src\\\\search.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SearchCountries = () => {\n  _s();\n  const [countries, setCountries] = useState([]);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [filteredCountries, setFilteredCountries] = useState([]);\n\n  // Simulate fetching country data\n  useEffect(() => {\n    const data = [{\n      country: \"United States\",\n      capital: \"Washington, D.C.\"\n    }, {\n      country: \"Canada\",\n      capital: \"Ottawa\"\n    }, {\n      country: \"Brazil\",\n      capital: \"Brasília\"\n    }, {\n      country: \"United Kingdom\",\n      capital: \"London\"\n    }, {\n      country: \"Australia\",\n      capital: \"Canberra\"\n    }, {\n      country: \"Germany\",\n      capital: \"Berlin\"\n    }, {\n      country: \"France\",\n      capital: \"Paris\"\n    }, {\n      country: \"Italy\",\n      capital: \"Rome\"\n    }, {\n      country: \"Spain\",\n      capital: \"Madrid\"\n    }, {\n      country: \"Japan\",\n      capital: \"Tokyo\"\n    }, {\n      country: \"China\",\n      capital: \"Beijing\"\n    }, {\n      country: \"India\",\n      capital: \"New Delhi\"\n    }, {\n      country: \"South Africa\",\n      capital: \"Pretoria\"\n    }, {\n      country: \"Russia\",\n      capital: \"Moscow\"\n    }, {\n      country: \"Mexico\",\n      capital: \"Mexico City\"\n    }, {\n      country: \"Argentina\",\n      capital: \"Buenos Aires\"\n    }];\n    setCountries(data);\n    setFilteredCountries(data); // Initially show all countries\n  }, []);\n\n  // Update search results as user types\n  useEffect(() => {\n    const searchResults = countries.filter(country => country.country.toLowerCase().includes(searchQuery.toLowerCase()) || country.capital.toLowerCase().includes(searchQuery.toLowerCase()));\n    setFilteredCountries(searchResults);\n  }, [searchQuery, countries]);\n  const handleSearchChange = e => {\n    setSearchQuery(e.target.value); // Update search query\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center',\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        color: '#333'\n      },\n      children: \"Search Countries by Name or Capital\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: searchQuery,\n      onChange: handleSearchChange,\n      placeholder: \"Search by country or capital\",\n      style: {\n        padding: '10px',\n        width: '300px',\n        borderRadius: '5px',\n        border: '1px solid #ccc',\n        marginBottom: '20px',\n        fontSize: '16px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      style: {\n        listStyle: 'none',\n        padding: 0\n      },\n      children: filteredCountries.map((country, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        style: {\n          padding: '10px',\n          borderBottom: '1px solid #ccc'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: country.country\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this), \" - \", country.capital]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(SearchCountries, \"9o0eZaknCY/oY/7nLa2Ypm8Jwpc=\");\n_c = SearchCountries;\nexport default SearchCountries;\nvar _c;\n$RefreshReg$(_c, \"SearchCountries\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","SearchCountries","_s","countries","setCountries","searchQuery","setSearchQuery","filteredCountries","setFilteredCountries","data","country","capital","searchResults","filter","toLowerCase","includes","handleSearchChange","e","target","value","style","textAlign","padding","children","color","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","width","borderRadius","border","marginBottom","fontSize","listStyle","map","index","borderBottom","_c","$RefreshReg$"],"sources":["C:/Users/kotha/OneDrive/Desktop/fullstack/findsearch/src/search.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst SearchCountries = () => {\r\n  const [countries, setCountries] = useState([]);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [filteredCountries, setFilteredCountries] = useState([]);\r\n\r\n  // Simulate fetching country data\r\n  useEffect(() => {\r\n    const data = [\r\n      { country: \"United States\", capital: \"Washington, D.C.\" },\r\n      { country: \"Canada\", capital: \"Ottawa\" },\r\n      { country: \"Brazil\", capital: \"Brasília\" },\r\n      { country: \"United Kingdom\", capital: \"London\" },\r\n      { country: \"Australia\", capital: \"Canberra\" },\r\n      { country: \"Germany\", capital: \"Berlin\" },\r\n      { country: \"France\", capital: \"Paris\" },\r\n      { country: \"Italy\", capital: \"Rome\" },\r\n      { country: \"Spain\", capital: \"Madrid\" },\r\n      { country: \"Japan\", capital: \"Tokyo\" },\r\n      { country: \"China\", capital: \"Beijing\" },\r\n      { country: \"India\", capital: \"New Delhi\" },\r\n      { country: \"South Africa\", capital: \"Pretoria\" },\r\n      { country: \"Russia\", capital: \"Moscow\" },\r\n      { country: \"Mexico\", capital: \"Mexico City\" },\r\n      { country: \"Argentina\", capital: \"Buenos Aires\" }\r\n    ];\r\n\r\n    setCountries(data);\r\n    setFilteredCountries(data); // Initially show all countries\r\n  }, []);\r\n\r\n  // Update search results as user types\r\n  useEffect(() => {\r\n    const searchResults = countries.filter(country =>\r\n      country.country.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n      country.capital.toLowerCase().includes(searchQuery.toLowerCase())\r\n    );\r\n    setFilteredCountries(searchResults);\r\n  }, [searchQuery, countries]);\r\n\r\n  const handleSearchChange = (e) => {\r\n    setSearchQuery(e.target.value); // Update search query\r\n  };\r\n\r\n  return (\r\n    <div style={{ textAlign: 'center', padding: '20px' }}>\r\n      <h2 style={{ color: '#333' }}>Search Countries by Name or Capital</h2>\r\n      <input\r\n        type=\"text\"\r\n        value={searchQuery}\r\n        onChange={handleSearchChange}\r\n        placeholder=\"Search by country or capital\"\r\n        style={{\r\n          padding: '10px',\r\n          width: '300px',\r\n          borderRadius: '5px',\r\n          border: '1px solid #ccc',\r\n          marginBottom: '20px',\r\n          fontSize: '16px',\r\n        }}\r\n      />\r\n      <ul style={{ listStyle: 'none', padding: 0 }}>\r\n        {filteredCountries.map((country, index) => (\r\n          <li key={index} style={{ padding: '10px', borderBottom: '1px solid #ccc' }}>\r\n            <strong>{country.country}</strong> - {country.capital}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchCountries;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}